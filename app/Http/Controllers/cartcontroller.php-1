<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Razorpay\Api\Api;
use Illuminate\Support\Str;
use Session;
use DB;
use Mail;

class cartcontroller extends Controller
{
    private $razorpayId = "rzp_test_oGWqJW6LQBc9Gs";
    private $razorpayKey = "EDknjtGrhABUsDq0FGfnYDM3";

    public function cart(Request $request)
    { 
		 $u_id=Session::get('user_login_id'); 
		 $dev_id=$request->post('dev_id');

		if(empty($u_id))
		{
			$developer_cart = Session::get('developer_cart');
			$qty=0;				
			$developer_cart[] = array(
				"dev_id" => $dev_id,	
			);
			Session::put('developer_cart', $developer_cart);
			$i=1;
			foreach ($developer_cart as $id => $val) 
			{			
				$qty+=$developer_cart[$id]['dev_id'];	
				$i++;
			}
			echo $i;
		}
		else
		{
			$count=DB::table('developer_cart_tb')->whereNull('status')->where('dev_id','=',$dev_id)->where('u_id','=',$u_id)->count();
			if($count == 0)
			{
				$data = array('u_id'=>$u_id,'dev_id'=>$dev_id,'status'=>null);
				DB::table('developer_cart_tb')->insert($data);
			}
			echo $count=DB::table('developer_cart_tb')->whereNull('status')->where('u_id','=',$u_id)->count();
		}	
	}

	public function developer_checkout()
    {  
   
        $show['user_details'] = DB::table('user_login')->orderby('id','desc')->get();
        $show['about'] = DB::table('about_tb')->orderby('id','desc')->get();
    $show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
       
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $u_id=Session::get('user_login_id');

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();  
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();      

        $show['developer_cart'] = DB::table('developer_cart_tb')
        ->select('developer_details_tb.dev_id','developer_details_tb.pro_id','developer_details_tb.rating','developer_details_tb.name','developer_details_tb.image','developer_details_tb.perhr','developer_cart_tb.u_id','developer_cart_tb.dev_id as devp_id','developer_cart_tb.status')
        ->join('developer_details_tb','developer_details_tb.dev_id', '=', 'developer_cart_tb.dev_id')
        ->whereNull('status')
        ->get();

        $show['developer_cart_deatls'] = DB::table('higher_professional_tb')->get();

        return view('front/checkout')->with($show);
    }

    public function developer_proceed_checkout()
    {  
    $show['user_details'] = DB::table('user_login')->orderby('id','desc')->get();
    $show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
       
       $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $u_id=Session::get('user_login_id');

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();

        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();

         $show['developer_cart'] = DB::table('developer_cart_tb')
        ->select('developer_details_tb.dev_id','developer_details_tb.pro_id','developer_details_tb.rating','developer_details_tb.name','developer_details_tb.image','developer_details_tb.perhr','developer_cart_tb.u_id','developer_cart_tb.dev_id as devp_id','developer_cart_tb.status')
        ->join('developer_details_tb','developer_details_tb.dev_id', '=', 'developer_cart_tb.dev_id')
        ->whereNull('status')
        ->get();


        $show['developer_cart_deatls'] = DB::table('higher_professional_tb')->get();

return view('front/developer_proceed_checkout')->with($show);
    }

     public function developer_payment_initiate(Request $request)
    {
    	
		$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $u_id=Session::get('user_login_id'); 

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();

        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();

  		$fname = $request->post('fname');
  		$lname = $request->post('lname');
		$email = $request->post('email');
		$phone = $request->post('phone');
		$company_name = $request->post('company_name');
		$country = $request->post('country');
		$state = $request->post('state');
		$city = $request->post('city');
		$address_one = $request->post('address_one');
		$address_two = $request->post('address_two');
		$code = $request->post('code');
		$gst = $request->post('gst');
		$purpose = $request->post('purpose');

		session(['fname' => $fname]);
		session(['lname' => $lname]);
		session(['email' => $email]);
		session(['phone' => $phone]);
		session(['company_name' => $company_name]);
		session(['country' => $country]);
		session(['state' => $state]);
		session(['city' => $city]);
		session(['address_one' => $address_one]);
		session(['address_two' => $address_two]);
		session(['code' => $code]);
		session(['gst' => $gst]);
		session(['purpose' => $purpose]);

		$tperhr= Session::get('tperhr');
				
		$final=$tperhr;		
		// Generate random receipt id
        $receiptId = Str::random(20);        
        // Create an object of razorpay
        $api = new Api($this->razorpayId, $this->razorpayKey);
        // In razorpay you have to convert rupees into paise we multiply by 100
        // Creating order
        $order = $api->order->create(array(
			'receipt' => $receiptId,
			'amount' => $final * 100,
			'currency' => 'INR'
			)
        );

         request()->validate([
		
		'phone' => 'required|digits:10',
		
		]);
        // Return response on payment page
        $response = [
			'orderId' => $order['id'],
			'razorpayId' => $this->razorpayId,
			'currency' => 'INR',
			'amount' => $final,			
			'fname' =>$fname,
			'lname' =>$lname,             
			'email' => $email,
			'phone' =>$phone,
			'company_name' =>$company_name,
			'country' =>$country,
			'state' =>$state,
			'city' =>$city,
			'address_one' =>$address_one,
			'address_two' =>$address_two,
			'code' =>$code,
			'gst' =>$gst,
			'purpose' =>$purpose,
			'description' => 'Buy Plan Payment',
        ];
        // Let's checkout payment page is it working	
	return view('front/developer_payment',compact('response'))->with($show);
    }
	

	public function developer_payment(Request $request)
    { 
    	$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        $show['banner'] = DB::table('banner_tb')->orderby('id','desc')->get();
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $u_id=Session::get('user_login_id'); 

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();

        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();

    	$fname=Session::get('fname');
    	$lname=Session::get('lname');
    	$email=Session::get('email');
    	$phone=Session::get('phone');
    	$company_name=Session::get('company_name');
    	$country=Session::get('country');
    	$state=Session::get('state');
    	$city=Session::get('city');
    	$address_one=Session::get('address_one');
    	$address_two=Session::get('address_two');
    	$code=Session::get('code');
    	$gst=Session::get('gst');
    	$purpose=Session::get('purpose');

    	$signatureStatus = $this->SignatureVerify(
			$request->all()['rzp_signature'],
			$request->all()['rzp_paymentid'],
			$request->all()['rzp_orderid']
		);
		// If Signature status is true We will save the payment response in our database
		// In this tutorial we send the response to Success page if payment successfully made
		if($signatureStatus == true)
		{
			$u_id=Session::get('user_login_id'); 
			$order_id = rand(0,9999);
			
			$cart = DB::table('developer_cart_tb')
				->select('developer_details_tb.dev_id','developer_details_tb.perhr','developer_cart_tb.id')
				->join('developer_details_tb','developer_details_tb.dev_id', '=', 'developer_cart_tb.dev_id')
				->whereNull('developer_cart_tb.status')->where('developer_cart_tb.u_id','=',$u_id)->get();		


				

				$price=0;
				foreach($cart as $c)
				{
					$order_data=array(
					'order_id'=>$order_id,
					'u_id'=>$u_id,
					'fname'=>$fname,
					'lname'=>$lname,
					'email'=>$email,
					'phone'=>$phone,
					'company_name'=>$company_name,
					'country'=>$country,
					'state'=>$state,
					'city'=>$city,
					'address_one'=>$address_one,
					'address_two'=>$address_two,
					'code'=>$code,
					'gst'=>$gst,
					'purpose'=>$purpose,
					'dev_id'=>$c->dev_id,
					'perhr'=>$c->perhr,
					'status'=>'Booked',				
					'payment_status'=>'SUCCESS',
					'date' => date("Y-m-d")				
					);				
					DB::table('developer_order_tb')->insert($order_data);

					$payment_data=array(
					'order_id'=>$order_id,
					'perhr'=>$c->perhr,
					'razorpay_payment_id'=>$request->all()['rzp_paymentid'],
					'date' => date("Y-m-d")
					);	

					DB::table('developer_payment_tb')->insert($payment_data);
					
					$id=$c->id;
					$cart_data=array('status'=>'Order');
					DB::table('developer_cart_tb')->where('id','=',$id)->update($cart_data);

					$email=Session::get('email');
					$details = DB::table('developer_order_tb')->where('email',$email)->get();
		            $emails=array();
		            foreach ($details as $key) 
		            {
		                $emails[]= $key->email;
		            }

		            $data = DB::table('developer_order_tb')->where('email',$email)->get();
		            foreach ($data as $k) 
		            {
		                $fname = $k->fname;
		                $order_id = $k->order_id;
		                $url = route('contact');
		            }
		           $datas=array(
		                'fname'=>$fname,
		                'order_id'=>$order_id,
		                'link'=>$url
		            );

					Mail::send('developer_payment_mail', $datas, function($message) use ($emails) {
			            $message->to($emails)->subject('Mellow Element');
			            $message->from('payalmahendra143@gmail.com', 'The Mellow Element');   
			        });
				}
				
				return view('front/thank_you')->with($show);
		}
		else
		{
			// You can create this page
			echo "not done";
		}
	}

	private function SignatureVerify($_signature,$_paymentId,$_orderId)
	{
		try
		{
			// Create an object of razorpay class
			$api = new Api($this->razorpayId, $this->razorpayKey);
			$attributes  = array('razorpay_signature'  => $_signature,  'razorpay_payment_id'  => $_paymentId ,  'razorpay_order_id' => $_orderId);
			$order  = $api->utility->verifyPaymentSignature($attributes);
			return true;
		}
		catch(\Exception $e)
		{
			// If Signature is not correct its give a excetption so we use try catch
			return false;
		}
	}

	public function delete_developer_cart($dev_id)
    {
        $info_delete=DB::table('developer_cart_tb')->where('dev_id', $dev_id)->delete();
        if($info_delete==true)
        {
           session(['message' =>'success', 'errmsg'=>'Cart Item Delete Successfully.']); 
           return redirect()->route('index');
        }
        else
        {

            session(['message' =>'danger', 'errmsg'=>'Cart Item Delete Failed']); 
            return redirect()->route('user_profile');
        }
    }  

	public function resume_download($dev_id)
    { 

    	$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
        $show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['banner'] = DB::table('banner_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();

        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.tax','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

         $u_id=Session::get('user_login_id'); 

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->where('u_id' ,'=', $u_id )->count();


        if(!empty(Session::get('user_login_id'))) {

            $u_id = Session::get('user_login_id');
            $use = DB::table('developer_order_tb')->where([['u_id','=' , $u_id],['payment_status', 'SUCCESS'],['dev_id','=' ,$dev_id]])->count();
            echo $use;
            if($use > 0 )
            {
                $show= DB::table('developer_order_tb')->where([['u_id','=' , $u_id],['payment_status', 'SUCCESS'],['dev_id','=' , $dev_id]])->get();
                foreach($show as $s)            
                {
                    $dev_id=$s->dev_id;
                    $details = DB::table('developer_details_tb')->where('dev_id','=',$dev_id)->first();
                   
                    $file = $details->resume;
                   	$myFile = public_path('upload/resume/'.$file);
                    return response()->download($file); }    
            	}
            else
            {
                session(['message' =>'danger', 'errmsg'=>'Payment not complete']); 
                return redirect()->back();
            }
        }
        else
        {
            return view('front/registration')->with($show);
        }
    }
    
}
