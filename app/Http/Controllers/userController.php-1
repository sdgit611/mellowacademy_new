<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Support\Facades\Auth;
use Razorpay\Api\Api;
use Illuminate\Support\Str;
use Session;
use DB;
use PDF;
use Image;
use Mail;


class userController extends Controller
{
	private $razorpayId = "rzp_test_oGWqJW6LQBc9Gs";
    private $razorpayKey = "EDknjtGrhABUsDq0FGfnYDM3";
	
   public function registration()
    { 
    	$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
        $show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['banner'] = DB::table('banner_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();

        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

        return view('front/registration')->with($show);
    }

    public function submit_registeration(Request $request)
    {
    	
        $show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();

        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

		request()->validate([
		'fname' => 'required',
		'lname' => 'required',
		'email' => 'required|email',
		'phone' => 'required|digits:10',
		'password' => 'required|min:5',
		'user_name' => 'required|min:5|max:255',
		'company_name' => 'required|min:5|max:255',
		'purpose' => 'required|min:5|max:255',
		]);
		
			$email=$request->post('email');
			$phone=$request->post('phone');
			$count = DB::table('user_login')->where('email',$email)->orwhere('phone',$phone)->count();
	
			if($count == 0)
			{
				$data=array(
					'fname'=>$request->post('fname'),
					'lname'=>$request->post('lname'),
					'email'=>$request->post('email'),
					'phone'=>$request->post('phone'),
					'password'=>md5($request->post('password')),
					'show_password'=>$request->post('password'),
					'user_name'=>$request->post('user_name'),
					'company_name'=>$request->post('company_name'),
					'purpose'=>$request->post('purpose'),
					'date'=>date('Y-m-d')
					);

				$result=DB::table('user_login')->insert($data);

				$email=$request->post('email'); 
        
	            $details = DB::table('user_login')->where('email',$email)->get();
	            $emails=array();
	            foreach ($details as $key) 
	            {
	                $emails[]= $key->email;
	                $email= $key->email;
	            }

	           $datas=array(
	                'email'=>$email
	            );

				if($result==true)
				{
					session(['message' =>'success', 'errmsg' =>'Registration Complete']);

						Mail::send('registration_mail', $datas, function($message) use ($emails) {
                		$message->to($emails)->subject('Mellow Element');
                		$message->from('payalmahendra143@gmail.com', 'Mellow Elements');
            		});

					return view('front/registration_completed')->with($show);
				}
				else
				{
					session(['message' =>'danger', 'errmsg'=>'Registration Not Complete']); 
					return redirect()->back();
				}
			}
			else
			{
				session(['message' =>'danger', 'errmsg' =>'Email Id Or Contact Number Already Exists.']);
				return redirect()->back();
			}
	}

	public function verify_login(Request $request)
    {
    	$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['banner'] = DB::table('banner_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
       	$show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

		request()->validate(['phone' => 'required','password' => 'required']);		
		
		$phone=$request->post('phone');
		$pass=$request->post('password');
		$password=md5($pass);

		$use = DB::table('user_login')->where('email','=',$phone)->orwhere('phone','=',$phone)->where('password','=',$password)->count();
       	if($use > 0)
        {
			$details= DB::table('user_login')->where('email','=',$phone)->orwhere('phone','=',$phone)->where('password','=',$password)->get();
			foreach($details as $dd)
			{
				$id=$dd->id;
			}
				session(['user_login_id' => $id]);
           	    $cart = Session::get('cart');
           		$developer_cart = Session::get('developer_cart');


           		if(!empty($cart))
				{
					$u_id=$id;
           			foreach ($cart as $id => $val) 
					{					
						$p_id=$cart[$id]['p_id'];
						$count=DB::table('cart_tb')->whereNull('status')->where('p_id','=',$p_id)->where('u_id','=',$u_id)->count();
						if($count == 0)
						{
							$data = array('u_id'=>$u_id,'p_id'=>$p_id,'status'=>null);
							DB::table('cart_tb')->insert($data);
						}
					}
					Session::forget('cart');
				}
			if(!empty($developer_cart))
			{
				$u_id=$id;

				foreach ($developer_cart as $id => $val) 
				{					
					$dev_id=$developer_cart[$id]['dev_id'];
					$count=DB::table('developer_cart_tb')->whereNull('status')->where('dev_id','=',$dev_id)->where('u_id','=',$u_id)->count();
					if($count == 0)
					{
						$data = array('u_id'=>$u_id,'dev_id'=>$dev_id,'status'=>null);
						DB::table('developer_cart_tb')->insert($data);
					}
				}
					
				Session::forget('developer_cart');
			}
            session(['message' =>'success', 'errmsg' =>'Login Successfully.']);
			return redirect()->route('index')->with($show);
		}
        else
        {
            session(['message' =>'danger','errmsg' =>'Login Failed ? Mobile Number & Password Wrong....']);
            return redirect()->route('index')->with($show);
        }
	}

	public function user_logout()
	{
		$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
		$show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
		$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['banner'] = DB::table('banner_tb')->orderby('id','desc')->get();
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

		Session::forget('user_login_id');
		Session::flush();
		return redirect()->route('index')->with($show);
	}
	
	public function add_to_cart(Request $request)
    { 
		 $u_id=Session::get('user_login_id'); 
		 $p_id=$request->post('p_id');

		if(empty($u_id))
		{
			$cart = Session::get('cart');
			$qty=0;				
			$cart[] = array(
				"p_id" => $p_id,	
			);
			Session::put('cart', $cart);
			$i=1;
			foreach ($cart as $id => $val) 
			{			
				$qty+=$cart[$id]['p_id'];	
				$i++;
			}
			echo $i;
		}
		else
		{
			$count=DB::table('cart_tb')->whereNull('status')->where('p_id','=',$p_id)->where('u_id','=',$u_id)->count();
			if($count == 0)
			{
				$data = array('u_id'=>$u_id,'p_id'=>$p_id,'status'=>null);
				DB::table('cart_tb')->insert($data);
			}
			echo $count=DB::table('cart_tb')->whereNull('status')->where('u_id','=',$u_id)->count();
		}	
	}

	public function delete_cart($id)
    {
        $info_delete=DB::table('cart_tb')->where('id', $id)->delete();
        if($info_delete==true)
        {
           session(['message' =>'success', 'errmsg'=>'Cart Item Delete Successfully.']); 
           return redirect()->route('index');
        }
        else
        {

            session(['message' =>'danger', 'errmsg'=>'Cart Item Delete Failed']); 
            return redirect()->route('user_profile');
        }
    }  

	public function proceed_to_checkout()
    {  
    	$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        $show['banner'] = DB::table('banner_tb')->orderby('id','desc')->get();
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

		return view('front/proceed_to_checkout')->with($show);
    }

    public function payment_initiate(Request $request)
    {
    	
		$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        $show['banner'] = DB::table('banner_tb')->orderby('id','desc')->get();
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

  		$fname = $request->post('fname');
  		$lname = $request->post('lname');
		$email = $request->post('email');
		$phone = $request->post('phone');
		$company_name = $request->post('company_name');
		$country = $request->post('country');
		$state = $request->post('state');
		$city = $request->post('city');
		$address_one = $request->post('address_one');
		$address_two = $request->post('address_two');
		$code = $request->post('code');
		$gst = $request->post('gst');
		$purpose = $request->post('purpose');

		session(['fname' => $fname]);
		session(['lname' => $lname]);
		session(['email' => $email]);
		session(['phone' => $phone]);
		session(['company_name' => $company_name]);
		session(['country' => $country]);
		session(['state' => $state]);
		session(['city' => $city]);
		session(['address_one' => $address_one]);
		session(['address_two' => $address_two]);
		session(['code' => $code]);
		session(['gst' => $gst]);
		session(['purpose' => $purpose]);

		$tprice= Session::get('tprice');
				
		$final=$tprice;		
		// Generate random receipt id
        $receiptId = Str::random(20);        
        // Create an object of razorpay
        $api = new Api($this->razorpayId, $this->razorpayKey);
        // In razorpay you have to convert rupees into paise we multiply by 100
        // Creating order
        $order = $api->order->create(array(
			'receipt' => $receiptId,
			'amount' => $final * 100,
			'currency' => 'INR'
			)
        );
        // Return response on payment page
        $response = [
			'orderId' => $order['id'],
			'razorpayId' => $this->razorpayId,
			'currency' => 'INR',
			'amount' => $final,			
			'fname' =>$fname,
			'lname' =>$lname,             
			'email' => $email,
			'phone' =>$phone,
			'company_name' =>$company_name,
			'country' =>$country,
			'state' =>$state,
			'city' =>$city,
			'address_one' =>$address_one,
			'address_two' =>$address_two,
			'code' =>$code,
			'gst' =>$gst,
			'purpose' =>$purpose,
			'description' => 'Buy Plan Payment',
        ];
        // Let's checkout payment page is it working	
	return view('front/payment',compact('response'))->with($show);
    }
	

	public function checkout(Request $request)
    { 
    	$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        $show['banner'] = DB::table('banner_tb')->orderby('id','desc')->get();
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

    	$fname=Session::get('fname');
    	$lname=Session::get('lname');
    	$email=Session::get('email');
    	$phone=Session::get('phone');
    	$company_name=Session::get('company_name');
    	$country=Session::get('country');
    	$state=Session::get('state');
    	$city=Session::get('city');
    	$address_one=Session::get('address_one');
    	$address_two=Session::get('address_two');
    	$code=Session::get('code');
    	$gst=Session::get('gst');
    	$purpose=Session::get('purpose');

    	$signatureStatus = $this->SignatureVerify(
			$request->all()['rzp_signature'],
			$request->all()['rzp_paymentid'],
			$request->all()['rzp_orderid']
		);
		// If Signature status is true We will save the payment response in our database
		// In this tutorial we send the response to Success page if payment successfully made
		if($signatureStatus == true)
		{
			$u_id=Session::get('user_login_id'); 
			$order_id = rand(0,9999);
			
			$cart = DB::table('cart_tb')
				->select('product_tb.id','product_tb.price','cart_tb.id as c_id')
				->join('product_tb', 'product_tb.id', '=', 'cart_tb.p_id')
				->whereNull('cart_tb.status')->where('cart_tb.u_id','=',$u_id)->get();		
				
				$price=0;
				foreach($cart as $c)
				{
					$order_data=array(
					'order_id'=>$order_id,
					'u_id'=>$u_id,
					'fname'=>$fname,
					'lname'=>$lname,
					'email'=>$email,
					'phone'=>$phone,
					'company_name'=>$company_name,
					'country'=>$country,
					'state'=>$state,
					'city'=>$city,
					'address_one'=>$address_one,
					'address_two'=>$address_two,
					'code'=>$code,
					'gst'=>$gst,
					'purpose'=>$purpose,
					'p_id'=>$c->id,
					'tprice'=>$c->price,
					'status'=>'Booked',				
					'payment_status'=>'SUCCESS',
					'date' => date("Y-m-d")				
					);				
					DB::table('order_tb')->insert($order_data);

					$payment_data=array(
					'order_id'=>$order_id,
					'tprice'=>$c->price,
					'razorpay_payment_id'=>$request->all()['rzp_paymentid'],
					'date' => date("Y-m-d")
					);	

					DB::table('payment_tb')->insert($payment_data);
					
					$c_id=$c->c_id;
					$cart_data=array('status'=>'Order');
					DB::table('cart_tb')->where('id','=',$c_id)->update($cart_data);



					$email=Session::get('email');
					$details = DB::table('order_tb')->where('email',$email)->get();
		            $emails=array();
		            foreach ($details as $key) 
		            {
		                $emails[]= $key->email;
		            }

		            $data = DB::table('order_tb')->where('email',$email)->get();
		            foreach ($data as $k) 
		            {
		                $fname = $k->fname;
		                $order_id = $k->order_id;
		                $url = route('contact');
		            }
		           $datas=array(
		                'fname'=>$fname,
		                'order_id'=>$order_id,
		                'link'=>$url
		            );

					Mail::send('payment_mail', $datas, function($message) use ($emails) {
			            $message->to($emails)->subject('Mellow Element');
			            $message->from('payalmahendra143@gmail.com', 'Mellow Elements');   
			        });

				}

				return redirect()->route('thank_you');
				//return redirect('front/thank_you')->with($show);

			//echo 'rzp_signature'.$request->all()['rzp_signature'];
			//echo "<br>";
			//echo 'rzp_paymentid'.$request->all()['rzp_paymentid'];
			//echo "<br>";
			//echo 'rzp_orderid'.$request->all()['rzp_orderid'];
		}
		else
		{
			// You can create this page
			 session(['message' =>'danger', 'errmsg'=>'Payment Not Completed']); 
            return redirect()->back();
		}
	}

	private function SignatureVerify($_signature,$_paymentId,$_orderId)
	{
		try
		{
			// Create an object of razorpay class
			$api = new Api($this->razorpayId, $this->razorpayKey);
			$attributes  = array('razorpay_signature'  => $_signature,  'razorpay_payment_id'  => $_paymentId ,  'razorpay_order_id' => $_orderId);
			$order  = $api->utility->verifyPaymentSignature($attributes);
			return true;
		}
		catch(\Exception $e)
		{
			// If Signature is not correct its give a excetption so we use try catch
			return false;
		}
	}
	public function thank_you()
    {  
    	$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

		return view('front/thank_you')->with($show);
    }
	public function user_profile()
    {  
    	$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

		return view('front/user_profile')->with($show);
    }
    public function edit_profile(Request $request)
    {  
    	request()->validate([
		'fname' => 'required|min:5|max:255',
		'lname' => 'required|min:5|max:255',
		'email' => 'required|email',
		'phone' => 'required|digits:10',
		'user_name' => 'required|min:5|max:255',
		'company_name' => 'required|min:5|max:255',
		'user_purpose' => 'required|min:5|max:255',
		]);
        
        
        $data=array(
			'fname'=>$request->post('fname'),
			'lname'=>$request->post('lname'),
			'email'=>$request->post('email'),
			'phone'=>$request->post('phone'),
			'user_name'=>$request->post('user_name'),
			'company_name'=>$request->post('company_name'),
			'purpose'=>$request->post('user_purpose'),
			'date'=>date('Y-m-d')
		);

        $id=$request->post('update');       
        $result=DB::table('user_login')->where('id',$id)->update($data);
        if($result==true)
        {
            session(['message' =>'success', 'errmsg' =>'Profile Update Successfully...']);
            return redirect()->back();
        }
        else
        {
            session(['message' =>'danger', 'errmsg'=>'Profile Update Failed.']); 
            return redirect()->back();
        }
    }

    public function user_profile_show(Request $request)
    {   
        $purpose=$_POST['purpose'];
									
		if($purpose == 'For Myself')
		{
			$output='<input type="text" name="user_purpose" class="form-control" value="For Myself" palceholder="For Myself" readonly>';
            echo $output;
		}
		elseif($purpose == 'For Organization')
		{
			$output='<input type="text" name="user_purpose" class="form-control" value="For Organization" palceholder="For Organization" readonly>';
			
            echo $output;
		}
		else 
		{
			$output='<input type="text" name="user_purpose" class="form-control" value="For Designer" palceholder="For Designer" readonly>';
            echo $output;
		}
    }


    public function show_invoice()
    {  
    	$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();
		
		$show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
		$show['order_details'] = DB::table('order_tb')->orderby('id','desc')->get();
        $show['dev_order_details'] = DB::table('developer_order_tb')->orderby('id','desc')->get();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['order_details_empty'] = DB::table('order_tb')->groupBy('order_id')->orderby('id','desc')->count(); 
        $show['dev_order_details_empty'] = DB::table('developer_order_tb')->groupBy('order_id')->orderby('id','desc')->count(); 
       	    
    	return view('front/show_invoice')->with($show);
    }

    public function invoice($id)
    {  
    	$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

    	$count = DB::table('order_tb')->where('order_id','=',$id)->count();
		if($count > 0) {
	        $show['invoice'] = DB::table('order_tb')->where('order_id',$id)->groupBy('order_id')->orderby('id','desc')->get(); 
	        $show['payment'] = DB::table('payment_tb')->where('order_id',$id)->orderby('id','desc')->get();
	       
	        $show['details'] = DB::table('order_tb')
			->select('product_tb.name','product_tb.image','order_tb.order_id','order_tb.tprice','order_tb.p_id')
			->join('product_tb', 'product_tb.id', '=', 'order_tb.p_id')
			->where('order_tb.order_id', $id)
			->get();

	        return view('front/invoice')->with($show);
	    }else {

			return redirect()->back();
		}
    }
public function dev_invoice($id)
    {  
    	$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

    	$count = DB::table('developer_order_tb')->where('order_id','=',$id)->count();
		if($count > 0) {
	        $show['dev_invoice'] = DB::table('developer_order_tb')->where('order_id',$id)->groupBy('order_id')->orderby('id','desc')->get(); 
	        $show['dev_payment'] = DB::table('developer_payment_tb')->where('order_id',$id)->orderby('id','desc')->get();
	       
	        $show['dev_details'] = DB::table('developer_order_tb')
			->select('developer_details_tb.name','developer_details_tb.image','developer_order_tb.order_id','developer_order_tb.perhr','developer_order_tb.dev_id')
			->join('developer_details_tb', 'developer_details_tb.dev_id', '=', 'developer_order_tb.dev_id')
			->where('developer_order_tb.order_id', $id)
			->get();

	        return view('front/developer_invoice')->with($show);
	    }else {

			return redirect()->back();
		}
    }

    public function my_download()
    {  
    	$show['pro_rating'] = DB::table('rating_tb')->orderby('id','desc')->get(); 

        $show['about'] = DB::table('about_tb')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
    	$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get();

    	$show['order_details'] = DB::table('order_tb')
    	->select('product_tb.name','product_tb.image','product_tb.id','order_tb.p_id','order_tb.order_id','order_tb.payment_status','order_tb.date','order_tb.u_id')
        ->join('product_tb','product_tb.id', '=', 'order_tb.p_id')
    	->orderby('id','desc')
    	->get();

    	$show['order_empty'] = DB::table('order_tb')
    	->select('product_tb.name','product_tb.image','product_tb.id','order_tb.p_id','order_tb.order_id','order_tb.payment_status','order_tb.date','order_tb.u_id')
        ->join('product_tb','product_tb.id', '=', 'order_tb.p_id')
    	->count(); 


    	$show['dev_order_details'] = DB::table('developer_order_tb')
    	->select('developer_details_tb.name','developer_details_tb.image','developer_details_tb.dev_id','developer_details_tb.rating','developer_details_tb.pro_id','developer_order_tb.id','developer_order_tb.order_id','developer_order_tb.payment_status','developer_order_tb.date','developer_order_tb.u_id')
        ->join('developer_details_tb','developer_details_tb.dev_id', '=', 'developer_order_tb.dev_id')
    	->orderby('id','desc')
    	->get();

		$show['profession'] = DB::table('higher_professional_tb')->orderby('id','desc')->get(); 


    	$show['dev_order_details_empty'] = DB::table('developer_order_tb')
    	->select('developer_details_tb.name','developer_details_tb.image','developer_details_tb.dev_id','developer_order_tb.id','developer_order_tb.order_id','developer_order_tb.payment_status','developer_order_tb.date','developer_order_tb.u_id')
        ->join('developer_details_tb','developer_details_tb.dev_id', '=', 'developer_order_tb.dev_id')
    	->count(); 
    	
    	
    	$show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

		return view('front/my_download')->with($show);
    }
    public function act_setting()
    {  
    	
    	$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        $show['banner'] = DB::table('banner_tb')->orderby('id','desc')->get();
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

		return view('front/account_setting')->with($show);
    }

	public function update_change_password(Request $request)
    {   
    	$id= Session::get('user_login_id');
		if(empty($id))
		{
			return redirect()->route('index');
		}
		request()->validate(['confirm_password' => 'required','new_password' => 'required','old_password' => 'required']);
		$new=$request->post('new_password');	
		$con=$request->post('confirm_password');
		$old=$request->post('old_password');
		if($new==$con)
		{	
			$use = DB::table('user_login')->where('password','=',md5($old))->where('id',$id)->count();
			if($use > 0)
			{			
				$data=array('password'=>md5($new),'show_password'=>$new);
				$update_result=DB::table('user_login')->where('id',$id)->update($data);
				if($update_result==true)
				{
					session(['message' =>'success', 'errmsg' =>'Password Change Successfully.']);
					return redirect()->back();
				}
				else
				{
					session(['message' =>'danger', 'errmsg'=>'Password Change Failed. Due To Internal Server Error..']); 
					return redirect()->back();
				}
			}
			else
			{
				session(['message' =>'danger', 'errmsg'=>'Old Password Does Not Matched. Please Try Again.....']); 
				return redirect()->back();				
			}
		}
		else
		{
			session(['message' =>'warning', 'errmsg'=>'New Password & Confrim Password Do Not Matched.']); 
			return redirect()->back();
		}     
	}

	public function leave_comment(Request $req)
    {
        request()->validate([
        	'p_id' => 'required',
            'name' => 'required',
            'email' => 'required|email',
            'comment' => 'required'
        ]);     
        $data = array(
        	'p_id'=>$req->post('p_id'),
            'name'=>$req->post('name'),
            'email'=>$req->post('email'),
            'comment'=>$req->post('comment'),
            'date'=>date('y/m/d')
        );      
        $result=DB::table('comment_tb')->insert($data);
        if ($result==true) 
        {
            session(['message' =>'success', 'errmsg' =>'Thank You']);
            return redirect()->back();
        }
        else
        {
            session(['message' =>'danger', 'errmsg' =>'Your Comment Not submitted']);
            return redirect()->back();
        }           
    }

    public function reply(Request $req)
    {
        request()->validate([
        	'p_id' => 'required',
            'comment_id' => 'required',
            'reply_comment' => 'required'
        ]);     
        $data = array(
        	'p_id'=>$req->post('p_id'),
            'comment_id'=>$req->post('comment_id'),
            'reply_comment'=>$req->post('reply_comment'),
            'date'=>date('y/m/d')
        );      
        $result=DB::table('reply_comment_tb')->insert($data);
        if ($result==true) 
        {
            session(['message' =>'success', 'errmsg' =>'Thank You']);
            return redirect()->back();
        }
        else
        {
            session(['message' =>'danger', 'errmsg' =>'Your Comment Not submitted']);
            return redirect()->back();
        }           
    }

    public function search(Request $request)
    {
        $show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
        $show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['banner'] = DB::table('banner_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

       $usersearch = $request->post('usersearch'); 
       if(empty($usersearch))
       {
       	session(['message' =>'danger', 'errmsg' =>'Write Something']);
            return view('front/search_result')->with($show);
       }
       else{
      
       $show['search'] = DB::table('product_tb')->where( 'name', 'LIKE', '%' . $usersearch . '%')->orderby('id','desc')->get();
       return view('front/search_result')->with($show);
	   }    	     
    }

    public function higher_professional()
    {  
    	$show['higher_professional'] = DB::table('higher_professional_tb')->orderby('id','desc')->get(); 
        $show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
        $show['about'] = DB::table('about_tb')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

		return view('front/higher_professional')->with($show);
    }

    public function dev_details($id)
    {  
    	$show['developer'] = DB::table('developer_details_tb')
    	->select('higher_professional_tb.id as ids','higher_professional_tb.heading','developer_details_tb.dev_id','developer_details_tb.pro_id','developer_details_tb.name','developer_details_tb.description','developer_details_tb.image','developer_details_tb.phone','developer_details_tb.email','developer_details_tb.job','developer_details_tb.perhr','developer_details_tb.rating')
        ->join('higher_professional_tb','higher_professional_tb.id' , '=' , 'developer_details_tb.pro_id')
    	->where('pro_id',$id)
    	->orderby('id','desc')
    	->get(); 

    	$show['higher_professional'] = DB::table('higher_professional_tb')->orderby('id','desc')->get(); 
        $show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
        $show['about'] = DB::table('about_tb')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

		return view('front/developer')->with($show);
    }

    public function developer_detail($dev_id)
    {  
    	$show['deve'] = DB::table('developer_details_tb')->where('dev_id',$dev_id)->orderby('dev_id','desc')->get(); 
    	$show['higher_professional'] = DB::table('higher_professional_tb')->orderby('id','desc')->get(); 
        $show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
        $show['about'] = DB::table('about_tb')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

		return view('front/developer_detail')->with($show);
    }

    public function update_image(Request $request)
   {
       
        request()->validate(
        [
            'image' => 'required|image|mimes:jpg,png,jpeg,gif|max:5120',
        ]);  
        if(!empty($files=$request->file('image')))
        {
            $getimageName = time().'.'.$request->image->getClientOriginalExtension();       
            $path = public_path('upload/profile_image/'.$getimageName);
            $img = Image::make($request->file('image')->getRealPath())->resize(400,400)->save($path);
        }
        else
        {
            $getimageName=$request->post('old_image');
        }

        $data=array(
            'image'=>$getimageName,
        );
        $id=$request->post('update');       
        $result=DB::table('user_login')->where('id',$id)->update($data);
        if($result==true)
        {
            session(['message' =>'success', 'errmsg' =>'Profile Image Update Successfully...']);
            return redirect()->back();
        }
        else
        {
            session(['message' =>'danger', 'errmsg'=>'Profile Image Update Failed.']); 
            return redirect()->back();
        }
    }
    public function invoice_pdf($id)
    {  
        $count = DB::table('order_tb')->where('order_id','=',$id)->count();
		if($count > 0)
		{
	        $shows = DB::table('order_tb')->where('order_id',$id)->groupBy('order_id')->orderby('id','desc')->get(); 
	        $details = DB::table('payment_tb')->where('order_id',$id)->groupBy('order_id')->orderby('id','desc')->get();
	        

	        $show = DB::table('order_tb')
			->select('product_tb.name','product_tb.image','order_tb.order_id','order_tb.tprice','order_tb.p_id')
			->join('product_tb', 'product_tb.id', '=', 'order_tb.p_id')
			->where('order_tb.order_id', $id)
			->get();

	        view()->share('shows',$shows);

	        view()->share('show',$show);

	        view()->share('details',$details);

	        $pdf = PDF::loadView('invoice_pdf');
            return $pdf->download('invoice_pdf.pdf');
	    }
	    else
		{
			return redirect()->back();
		}
    }

    public function dev_invoice_pdf($id)
    {  
        $count = DB::table('developer_order_tb')->where('order_id','=',$id)->count();
		if($count > 0)
		{
	        $shows = DB::table('developer_order_tb')->where('order_id',$id)->groupBy('order_id')->orderby('id','desc')->get(); 
	        $details = DB::table('developer_payment_tb')->where('order_id',$id)->groupBy('order_id')->orderby('id','desc')->get();
	        
	        $show = DB::table('developer_order_tb')
			->select('developer_details_tb.name','developer_details_tb.image','developer_order_tb.order_id','developer_order_tb.perhr','developer_order_tb.dev_id')
			->join('developer_details_tb', 'developer_details_tb.dev_id', '=', 'developer_order_tb.dev_id')
			->where('developer_order_tb.order_id', $id)
			->get();

	        view()->share('shows',$shows);

	        view()->share('show',$show);

	        view()->share('details',$details);

	        $pdf = PDF::loadView('dev_invoice_pdf');
            return $pdf->download('dev_invoice_pdf.pdf');
	    }
	    else
		{
			return redirect()->back();
		}
    }
    public function send_message(Request $request)
    {
       
        $message=$request->post('message');           

       	$data = array('message'=>$message);
		$result=DB::table('message_tb')->insert($data);
       
        if($result==true) {
        	$shows = DB::table('message_tb')->where('order_id',$id)->groupBy('order_id')->orderby('id','desc')->get(); 	
        }else {
            session(['message' =>'danger', 'errmsg'=>'Message Not Send']); 
            return redirect()->back(); }
    } 

    public function forgetpassword()
    {  
    	$show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
		$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['about'] = DB::table('about_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count(); 
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

        return view('front/forgetpassword')->with($show);
    }

    public function sendforgetpassword(Request $request)
    {   

       $email = $request->post('email');

        $u_details = DB::table('user_login')->where('email','=',$email)->get();
        foreach($u_details as $ud) {
        $u_email = $ud->email;
        $fname = $ud->fname;
        $show_password = $ud->show_password;
        $url = route('index');
        }

        if($email == $u_email) 
        {
        	$datas=array(
        	'email'=>$u_email,
        	'fname'=>$fname,
        	'show_password'=>$show_password,
            'link'=>$url
        	);

        	Mail::send('forget_password_mail', $datas, function($message) use ($email)
        	{
	            $message->to($email)->subject('Forget Password Information From Mellow Element');
	            $message->from('payalmahendra143@gmail.com', 'The Mellow Element');
	       });
        	session(['message' =>'success', 'errmsg'=>'Password send in your email']);
        	return redirect()->back(); 	
        }
        else
        {
        	session(['message' =>'danger', 'errmsg'=>'Email Does Not Exits']); 
          return redirect()->back();
          
        } 
    }

    public function submit_rating(Request $request)
    {   
    	$ip = request()->ip();
    	$p_id=Session::get('p_id');
        $rating=$request->post('rating');
        $date=date('y/m/d');


        $count=DB::table('rating_tb')->where('ip','=',$ip)->where('p_id','=',$p_id)->count();

        if($count == 0){
        	$data = array('p_id'=>$p_id,'rating'=>$rating,'ip'=>$ip,'date'=>$date);       

	        DB::table('rating_tb')->insert($data);
        }else {
        	$data = array('rating'=>$rating,'date'=>$date); 
			DB::table('rating_tb')->where('ip',$ip)->where('p_id',$p_id)->update($data);
    	}
    }

    public function free_consultation(Request $req)
    {
    	$show['pro'] = DB::table('product_tb')->selectRaw('c_id, count(id) as count_id')->groupBy('c_id')->get();
        
        $show['allproduct'] = DB::table('product_tb')->orderby('id','desc')->limit(3)->get(); 
        $show['user_details'] = DB::table('user_login')->orderby('id','desc')->get(); 
        $show['about'] = DB::table('about_tb')->orderby('id','desc')->get(); 
    	$show['category'] = DB::table('category_tb')->orderby('id','desc')->get();
        $show['subcategorys'] = DB::table('subcategory_tb')->orderby('id','asc')->get();
        $show['banner'] = DB::table('banner_tb')->orderby('id','desc')->get();


        $show['cart_details'] = DB::table('cart_tb')
        ->select('product_tb.name','product_tb.image','product_tb.price','product_tb.pro_size','product_tb.id','cart_tb.u_id','cart_tb.id','cart_tb.status')
        ->join('product_tb','product_tb.id', '=', 'cart_tb.p_id')
        ->whereNull('status')
        ->get();

        $show['cart_value'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['cart_empty'] = DB::table('cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_empty'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();
        $show['developer_cart_value'] = DB::table('developer_cart_tb')->where('status' ,'=', Null)->count();

        
	        request()->validate([
	            
	            'email' => 'required|email',
	            'subject' => 'required',
	            'message' => 'required'
	        ]);     
	        $data = array(
	            'email'=>$req->post('email'),
	            'subject'=>$req->post('subject'),
	            'message'=>$req->post('message'),
	            'date'=>date('y/m/d')
	        );           
	        $result=DB::table('free_consultation_tb')->insert($data);

	        $email=$req->post('email');	
    	
	    	$details = DB::table('free_consultation_tb')->where('email',$email)->get();
	        $emails=array();
	        foreach ($details as $key) 
	        {
	            $emails[]= $key->email;
	            $subject = $key->subject;
	        }

	       $datas=array(
	            'subject'=>$subject
	        );
	        
	        if ($result==true) 
	        {
	            session(['message' =>'success', 'errmsg' =>'Enquiry Submit Successfully. We Will Contact You Very Soon...']);
	            
	            Mail::send('free_consultation_mail', $datas, function($message) use ($emails) {
	            $message->to($emails)->subject('Mellow Element');
	            $message->from('payalmahendra143@gmail.com', 'Mellow Elements');
	            
	        });

	            return view('front/index')->with($show);
	        }
	        else
	        {
	            session(['message' =>'danger', 'errmsg' =>'Enquiry Submit failed. Please Try Again....']);
	            return redirect()->back();
	        }          
    }
}
